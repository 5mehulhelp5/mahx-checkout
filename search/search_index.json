{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MAHX Checkout","text":"<p>\ud83d\ude80 MAHX Checkout is a blazing-fast, lightweight, and Magento-native checkout solution for Magento 2. Built with HTMX, Alpine.js, and TailwindCSS, it offers a modern developer experience while staying true to Magento\u2019s architectural principles.</p>"},{"location":"#what-is-mahx-checkout","title":"\u2728 What is MAHX Checkout?","text":"<p>MAHX (Magento + HTMX) Checkout is a clean, minimal, and extendable checkout system for Magento 2. It's designed for developers who love the Magento way \u2014 working with layouts, blocks, and controllers \u2014 but want a faster, JavaScript-light experience on the frontend.</p>"},{"location":"#why-mahx-checkout","title":"\ud83d\udca1 Why MAHX Checkout?","text":"<ul> <li>\u2705 Magento-Native: Built entirely using Magento layouts, blocks, and controllers \u2014 no magic, just Magento.</li> <li>\u26a1 Super Fast: Powered by HTMX \u2014 minimal JavaScript, instant partial updates.</li> <li>\ud83e\udde9 Lightweight &amp; Modular: Uses Alpine.js and TailwindCSS for reactive behavior and clean styling.</li> <li>\ud83d\udc68\u200d\ud83d\udcbb Developer-Friendly: Designed for Magento developers with the concepts they already familiar with.</li> <li>\ud83e\uddd8 Zero State Management: You heard it right! No state juggling in the frontend or PHP \u2014 everything lives cleanly at the database level, just as Magento intended.</li> <li>\ud83d\udcda Tiny Learning Curve: If you know Magento, you\u2019re already 90% there. Just learn HTMX \u2014 it's fun and you\u2019ll pick it up in 2 hours!</li> </ul>"},{"location":"#tech-stack","title":"\ud83d\udd27 Tech Stack","text":"Tool Purpose HTMX Handles dynamic requests and updates via AJAX Alpine.js Provides lightweight frontend interactivity TailwindCSS Utility-first styling framework JustValidate Handles frontend form validation"},{"location":"#who-should-use-it","title":"\ud83d\udc65 Who Should Use It?","text":"<p>MAHX Checkout works with any monolithic Magento 2 storefront, including:</p> <ul> <li>Luma</li> <li>Hyv\u00e4 Themes</li> <li>Custom Magento 2 themes</li> </ul> <p>If you're tired of bloated JavaScript-heavy checkouts, this is for you.</p>"},{"location":"#what-its-not","title":"\ud83e\uddf1 What It\u2019s Not","text":"<p>MAHX Checkout is not a plug-and-play one-size-fits-all solution.</p> <p>It\u2019s more like a DIY developer kit for building your ideal checkout \u2014 using familiar Magento patterns (layouts, blocks, controllers). The default look resembles Luma, but everything is easily customizable.</p>"},{"location":"#what-about-payment-shipping-methods","title":"\ud83d\udcb3 What About Payment &amp; Shipping Methods?","text":"<p>Not all third-party shipping and payment methods will \"just work\" out of the box.</p> <p>\ud83d\udc49 You\u2019ll need to make them compatible with MAHX Checkout\u2019s structure. But don\u2019t worry \u2014 the project provides clear guidance on how to do this easily. Check the docs for integration help.</p>"},{"location":"#sponsors-welcome","title":"\ud83d\ude4f Sponsors Welcome!","text":"<p>This project is built with love, time, and coffee \u2615.</p> <p>If you find value in MAHX Checkout, consider sponsoring its development. Your support directly fuels future features, faster releases, and better documentation.</p> <p>Want to jump in? Head over to GitHub and give it a \u2b50!</p>"},{"location":"address-renderers/","title":"Address Field Renderers in MAHX Checkout","text":"<p>The MAHX Checkout module introduces a powerful and flexible system to render and manage Shipping and Billing address fields. It decouples data, UI logic, and dynamic behavior, empowering developers to customize and extend address fields with minimal effort and maximum control.</p>"},{"location":"address-renderers/#core-concept","title":"\ud83d\udca1 Core Concept","text":"<p>Each address field is encapsulated by the <code>MageHx\\MahxCheckout\\Data\\AddressFieldAttributes</code> data object. These field objects are dynamically rendered using pluggable Field Renderers, and the entire system is designed to be:</p> <ul> <li>Configurable via <code>di.xml</code></li> <li>Customizable via observers and plugins</li> <li>Extendable via events fired at strategic points</li> </ul> <p>This makes the system incredibly extensible while keeping the base logic clean and modular.</p>"},{"location":"address-renderers/#address-field-rendering-workflow","title":"\ud83e\uddf1 Address Field Rendering Workflow","text":"<p>Here\u2019s how the address field rendering system works under the hood:</p> <ol> <li> <p>Field Preparation</p> <ul> <li>The method <code>getAddressFieldList($formId)</code> in <code>MageHx\\MahxCheckout\\Service\\AddressFieldManager</code> fetches the field definitions for a form.</li> <li>Fields are represented as <code>AddressFieldAttributes</code> data objects.</li> </ul> </li> <li> <p>Field Rendering</p> <ul> <li>For each field, the <code>RendererPool::getRenderer()</code> method determines the appropriate renderer.</li> <li>The chosen renderer is then used to generate the final HTML using block templates.</li> </ul> </li> <li> <p>ViewModels</p> <ul> <li><code>ShippingAddress</code> and <code>BillingAddress</code> ViewModels use <code>getAddressFields()</code> to fetch and render fields in their respective templates.</li> </ul> </li> <li> <p>Templates</p> <ul> <li>Final HTML is generated by blocks like <code>MageHx\\MahxCheckout\\Block\\Address\\FieldRenderer</code>.</li> <li>Templates reside in: <code>view/frontend/templates/ui/address/fields/*.phtml</code></li> </ul> </li> </ol>"},{"location":"address-renderers/#renderer-configuration","title":"\u2699\ufe0f Renderer Configuration","text":"<p>Field renderers are defined in <code>di.xml</code> under <code>RendererPool</code>:</p> <pre><code>&lt;type name=\"MageHx\\MahxCheckout\\Model\\FieldRenderer\\RendererPool\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"renderers\" xsi:type=\"array\"&gt;\n            &lt;item name=\"MageHx_MahxCheckout::text\" xsi:type=\"array\"&gt;\n                &lt;item name=\"class\" xsi:type=\"object\"&gt;MageHx\\MahxCheckout\\Model\\FieldRenderer\\Renderer\\TextRenderer&lt;/item&gt;\n            &lt;/item&gt;\n            &lt;!-- Add more renderers here --&gt;\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/type&gt;\n</code></pre> <p>Each renderer must implement the <code>FieldRendererInterface</code> with two methods:</p> <ul> <li><code>render(AddressFieldAttributes $field): string</code></li> <li><code>canRender(AddressFieldAttributes $field): bool</code></li> </ul> <p>This design allows flexible matching and rendering of fields based on custom logic.</p>"},{"location":"address-renderers/#address-field-attributes","title":"\ud83e\udde9 Address Field Attributes","text":"<p>The <code>AddressFieldAttributes</code> object holds all the metadata required to define and render a form field:</p> Attribute Description <code>name</code> Field name identifier <code>label</code> Field label shown to users <code>type</code> Input type (e.g. <code>text</code>, <code>select</code>, etc.) <code>required</code> Is this field required? (bool) <code>form</code> The form ID it belongs to <code>value</code> Current/default value <code>rules</code> Validation rules <code>sortOrder</code> Position in the form <code>additionalData</code> Extra data for rendering and behavior (see below)"},{"location":"address-renderers/#additionaldata-options-enum-additionalfieldattribute","title":"\ud83d\udd27 <code>additionalData</code> Options (Enum: <code>AdditionalFieldAttribute</code>)","text":"Key Purpose <code>options</code> Options for <code>select</code> fields (key-value pairs) <code>defaultOptionLabel</code> Default option label for <code>select</code> fields <code>inputElemAdditionalAttributes</code> Add extra HTML attributes (e.g. <code>hx-*</code>) to <code>&lt;input&gt;</code> <code>beforeInputHtml</code> Insert custom HTML before input element <code>afterInputHtml</code> Insert custom HTML after input element <code>wrapperElemExtraClass</code> Add extra CSS classes to the field wrapper div <code>wrapperElemAdditionalAttributes</code> Add extra attributes to the wrapper div <p>These options allow rich customization of each field\u2019s structure and behavior without rewriting HTML templates.</p>"},{"location":"address-renderers/#extendability-via-events","title":"\ud83d\udee0\ufe0f Extendability via Events","text":"<p>MAHX Checkout fires several helpful events during field generation and rendering. You can use observers to hook into these events.</p>"},{"location":"address-renderers/#shipping-address-events","title":"\ud83d\ude9a Shipping Address Events","text":"Context Event Name Field Preparation <code>mahxcheckout_address_form_fields_prepared</code><code>mahxcheckout_shipping_address_form_fields_prepared</code> Renderer Selection <code>mahxcheckout_address_field_renderer_selected</code> Before/After Render <code>mahxcheckout_shipping_address_field_render_before</code><code>mahxcheckout_shipping_address_field_render_after</code>"},{"location":"address-renderers/#billing-address-events","title":"\ud83d\udcb3 Billing Address Events","text":"Context Event Name Field Preparation <code>mahxcheckout_address_form_fields_prepared</code><code>mahxcheckout_billing_address_form_fields_prepared</code> Renderer Selection <code>mahxcheckout_address_field_renderer_selected</code> Before/After Render <code>mahxcheckout_billing_address_field_render_before</code><code>mahxcheckout_billing_address_field_render_after</code>"},{"location":"address-renderers/#renderer-configuration-events","title":"\ud83e\udde9 Renderer Configuration Events","text":"<p>These events allow injection or modification of renderers:</p> Event Description <code>mahxcheckout_prepare_address_field_renderers_before</code> Modify or add renderers before renderer pool is built <code>mahxcheckout_prepare_address_field_renderers_after</code> Modify or add renderers after pool is built"},{"location":"address-renderers/#example-observers","title":"\ud83d\udcda Example Observers","text":"<p>Here are a few real-world examples from the codebase:</p> Event Example Observer <code>mahxcheckout_address_form_fields_prepared</code> <code>AddCountryOptions</code> <code>mahxcheckout_shipping_address_form_fields_prepared</code> <code>PopulateShippingAddressFormValues</code> <code>mahxcheckout_billing_address_form_fields_prepared</code> <code>PopulateBillingAddressFormValues</code> <code>mahxcheckout_address_field_renderer_selected</code> <code>UpdateRegionFieldBasedOnCountry</code>"},{"location":"address-renderers/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Always prefer observers or plugins to modify fields and renderers.</li> <li>Avoid overriding core ViewModels or templates directly.</li> <li>Use <code>additionalData</code> to add dynamic behavior to input fields.</li> <li>Follow the provided examples to inject custom renderers cleanly.</li> </ul>"},{"location":"address-renderers/#summary","title":"\ud83e\uddea Summary","text":"<p>MAHX Checkout\u2019s address field rendering system is built with modularity and flexibility in mind. Whether you want to:</p> <ul> <li>Add a new input field,</li> <li>Change its behavior or appearance,</li> <li>Inject dynamic frontend attributes,</li> <li>Or even swap out the renderer logic entirely.</li> </ul>"},{"location":"layouts/","title":"\ud83d\udcca MAHX Checkout \u2014 Layouts","text":"<p>MAHX Checkout uses a bunch of layout XML files to organize different parts of the checkout page. Each file groups related blocks together \u2014 making it easier to follow what\u2019s going on, and way simpler to customize later.</p> <p>Here\u2019s a quick breakdown of each layout file, what it does, and which blocks or containers it sets up.</p>"},{"location":"layouts/#directory-structure","title":"\ud83d\uddc2\ufe0f Directory Structure","text":"<pre><code>view/frontend/layout/\n\u251c\u2500\u2500 mahxcheckout_index_index.xml\n\u251c\u2500\u2500 mahxcheckout_layout.xml\n\u251c\u2500\u2500 mahxcheckout_components.xml\n\u251c\u2500\u2500 mahxcheckout_scripts.xml\n\u251c\u2500\u2500 mahxcheckout_step_shipping.xml\n\u251c\u2500\u2500 mahxcheckout_step_shipping_customer_logged_in.xml\n\u251c\u2500\u2500 mahxcheckout_step_payment.xml\n\u2514\u2500\u2500 mahxcheckout_step_payment_customer_logged_in.xml\n</code></pre>"},{"location":"layouts/#1-mahxcheckout_index_indexxml","title":"1. <code>mahxcheckout_index_index.xml</code>","text":"<p>Handle: Entry layout handle for the checkout.</p> <p>Triggered on: Frontend route <code>/checkout</code> (internally <code>/mahxcheckout</code>)</p>"},{"location":"layouts/#purpose","title":"\ud83d\udd0d Purpose","text":"<ul> <li>Main page layout handle for the checkout route.</li> <li>Loads essential scripts and styles for the checkout.</li> <li>Removes default Luma checkout assets to avoid conflicts.</li> <li>Defines the entry block <code>main.phtml</code>, which initializes the Alpine/HTMX-based UI.</li> <li>Declares a <code>checkout.scripts</code> container for mounting Alpine components.</li> <li>Adds a page loader block.</li> </ul>"},{"location":"layouts/#2-mahxcheckout_layoutxml","title":"2. <code>mahxcheckout_layout.xml</code>","text":"<p>Handle: Included via <code>mahxcheckout_index_index.xml</code></p> <p>Purpose: Core layout skeleton for the entire MAHX Checkout page.</p>"},{"location":"layouts/#structure-highlights","title":"\ud83d\udd0d Structure Highlights","text":"<ul> <li>Mimics Luma checkout structure.</li> <li>Declares <code>checkout.step.navigation</code> \u2014 the top step indicator block.</li> <li>Defines <code>checkout.main.content</code> \u2014 the dynamic area for step specific components.</li> <li>Includes <code>checkout.right.section</code> \u2014 contains order summary, totals, etc.</li> <li>Adds <code>checkout.notifications</code> \u2014 used for inline validation/error messaging.</li> </ul>"},{"location":"layouts/#3-mahxcheckout_componentsxml","title":"3. <code>mahxcheckout_components.xml</code>","text":"<p>Handle: Included via <code>mahxcheckout_layout.xml</code></p> <p>Purpose: Declares individual block components used in the checkout.</p> <p>A \"component\" here represents a logical UI section.</p> <p>Example: <code>shipping.address.form</code> \u2014 encapsulates the entire shipping address form.</p> <p>These blocks are modular and reusable across different steps.</p>"},{"location":"layouts/#4-mahxcheckout_scriptsxml","title":"4. <code>mahxcheckout_scripts.xml</code>","text":"<p>Handle: Included via <code>mahxcheckout_index_index.xml</code></p> <p>Purpose: Registers all Alpine.js components used throughout the checkout.</p>"},{"location":"layouts/#why-its-useful","title":"\u2705 Why it's useful","text":"<ul> <li>Centralizes all HTMX/Alpine scripts in one layout.</li> <li>Scripts load once and persist across dynamic swaps.</li> <li>Keeps JS organized and scoped to the checkout.</li> </ul> <p>\ud83d\udca1 When customizing MAHX Checkout, add your Alpine/HTMX components here to ensure they load consistently.</p>"},{"location":"layouts/#5-mahxcheckout_step_shippingxml","title":"5. <code>mahxcheckout_step_shipping.xml</code>","text":"<p>Handle: Dynamically loaded when the Shipping step is active.</p> <p>Purpose: Renders all block components related to the Shipping step.</p>"},{"location":"layouts/#how-it-works","title":"\ud83d\udcc1 How it works","text":"<p>This is a step-specific layout handle. MAHX Checkout dynamically loads only the layout file for the current step to reduce overhead and complexity.</p> <p>This layout ensures only shipping-related blocks are present when this step is active.</p> <p>Reference</p> <p>Checkout steps are registered in <code>app/etc/di.xml</code>. Layout handle mapping is part of the step configuration.</p>"},{"location":"layouts/#6-mahxcheckout_step_paymentxml","title":"6. <code>mahxcheckout_step_payment.xml</code>","text":"<p>Handle: Dynamically loaded when the Payment step is active.</p> <p>Purpose: Renders all block components related to the Payment step.</p>"},{"location":"layouts/#how-it-works_1","title":"\ud83d\udd0d How it works","text":"<p>Same mechanism as the shipping step. When the checkout is in the payment phase, this layout injects relevant payment blocks (like methods, billing address, etc.), and removes unrelated content.</p>"},{"location":"layouts/#7-mahxcheckout_step_shipping_customer_logged_inxml","title":"7. <code>mahxcheckout_step_shipping_customer_logged_in.xml</code>","text":"<p>Handle: Loaded only if the customer is logged in and for the Shipping step.</p> <p>Purpose: Provides a variation of the shipping layout tailored for logged-in users.</p>"},{"location":"layouts/#how-it-works_2","title":"\ud83d\udd0d How it works","text":"<p>MAHX Checkout dynamically includes additional handles for logged-in customers:</p> <p>Suppose current layout handles include:</p> <pre><code>- default\n- mahxcheckout_step_shipping\n</code></pre> <p>If the user is logged in, Magento will also include:</p> <pre><code>- default_customer_logged_in\n- mahxcheckout_step_shipping_customer_logged_in\n</code></pre> <p>This allows:</p> <ul> <li>Logged-in flows to include shipping address book features, saved addresses, etc.</li> <li>Guest flows to remain lightweight by excluding unnecessary components.</li> </ul>"},{"location":"layouts/#8-mahxcheckout_step_payment_customer_logged_inxml","title":"8. <code>mahxcheckout_step_payment_customer_logged_in.xml</code>","text":"<p>Handle: Loaded only if the customer is logged in and for the Payment step.</p> <p>Purpose: Provides a variation of the payment layout tailored for logged-in users.</p>"},{"location":"layouts/#how-it-works_3","title":"\ud83d\udd0d How it works","text":"<p>It is injected to the layout handle list similar to <code>mahxcheckout_step_shipping_customer_logged_in</code>.</p> <p>This allows:</p> <ul> <li>Logged-in flows to include billing address book features, saved addresses, etc.</li> <li>Guest flows to remain lightweight by excluding unnecessary components.</li> </ul>"},{"location":"layouts/#summary","title":"\ud83d\udccc Summary","text":"<ul> <li>MAHX Checkout layout files follow a modular, step-based architecture.</li> <li>Each step (Shipping, Payment, etc.) has its own isolated layout handle.</li> <li>Shared structures like <code>scripts</code>, <code>components</code>, and <code>main layout</code> are split for clarity and reuse.</li> <li>Logged-in and guest flows are handled via handle suffixes (<code>_customer_logged_in</code>).</li> </ul>"},{"location":"puzzle-htmx/","title":"\ud83e\udde9 The Puzzle Piece: HTMX in MAHX Checkout","text":"<p>In Magento checkout development, customization is everything.</p> <p>With MAHX Checkout, most of the code will feel instantly familiar. But there\u2019s one crucial puzzle piece that makes this checkout solution elegant and clean \u2014 HTMX.</p> <p>This page introduces HTMX in the context of Magento, and shows how it empowers MAHX Checkout with Ajax capabilities using minimal JavaScript, while fully respecting Magento's server-rendered architecture.</p>"},{"location":"puzzle-htmx/#what-is-htmx","title":"\ud83e\udde0 What is HTMX?","text":"<p>HTMX is a lightweight JavaScript library that gives your HTML superpowers \u2014 without needing to write much JavaScript at all.</p> <p>It allows you to make AJAX requests directly from HTML elements using simple attributes like <code>hx-get</code>, <code>hx-post</code>, <code>hx-trigger</code>, and more. This means you can build interactive, dynamic pages while keeping your frontend clean, declarative, and easy to manage.</p> <p>Think of it as a way to bring modern interactivity to traditional server-rendered pages \u2014 using just HTML.</p>"},{"location":"puzzle-htmx/#how-is-htmx-different","title":"\ud83d\udd0d How is HTMX Different?","text":"<p>Traditionally, only <code>&lt;form&gt;</code> and <code>&lt;a&gt;</code> elements can make HTTP requests in HTML. For anything more dynamic, you\u2019d usually need JavaScript.</p> <p>HTMX changes that by letting any HTML element make ajax requests. You just add a few <code>hx-*</code> attributes, and HTMX takes care of the rest \u2014 no need to write JS event listeners or use a frontend framework.</p>"},{"location":"puzzle-htmx/#how-htmx-works","title":"\u2699\ufe0f How HTMX Works","text":"<p>Here\u2019s a basic example:</p> <pre><code>&lt;button hx-get=\"/hello\" hx-target=\"#result\"&gt;Click Me&lt;/button&gt;\n&lt;div id=\"result\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"puzzle-htmx/#what-happens","title":"What happens:","text":"<ol> <li>\u2705 HTMX sees the <code>hx-get</code> on the button.</li> <li>\ud83d\udc49 Clicking the button sends a GET request to <code>/hello</code>.</li> <li>\ud83d\udce1 The server responds with HTML (not JSON!).</li> <li>\ud83c\udfaf HTMX inserts the response HTML into the element with ID <code>#result</code> (as defined by <code>hx-target</code>).</li> </ol>"},{"location":"puzzle-htmx/#why-use-htmx","title":"\u2705 Why Use HTMX?","text":"<ul> <li>\ud83e\uddfc Less JavaScript: No need to manually write fetch requests or event handlers.</li> <li>\ud83e\udde9 Fully HTML-driven: Keep your UI logic close to your templates.</li> <li>\u26a1 Works with server-rendered HTML: Perfect for frameworks like Magento, Laravel, Django, or Rails.</li> <li>\ud83c\udfaf Precise control: You can specify exactly when and where to update the page.</li> <li>\ud83e\udeb6 Small &amp; stable: HTMX is just ~10kB and its API is designed to be long-term stable.</li> </ul>"},{"location":"puzzle-htmx/#who-created-it","title":"\ud83d\udc64 Who Created It?","text":"<p>HTMX was created by Carson Gross, also known for Intercooler.js and hyperscript. His mission: make the web more dynamic without needing heavy frontend frameworks.</p> <p>\ud83d\udcda Want to dive deeper? Check out the HTMX official documentation or explore the full attribute reference.</p>"},{"location":"puzzle-htmx/#real-example-in-mahx-checkout","title":"\ud83d\udee0\ufe0f Real Example in MAHX Checkout","text":"<p>Let\u2019s look at how HTMX is used in the guest email field in MAHX Checkout.</p> <p>\ud83d\udcc4 Template: <code>Rkt_MahxCheckout::email/guest_email.phtml</code> \ud83e\uddf1 Block name: <code>guest.email.form</code></p> <pre><code>&lt;form id=\"guest-email-form\" novalidate x-data=\"GuestEmailForm\"&gt;\n    &lt;input\n        id=\"gef-email\" type=\"text\" name=\"email\" placeholder=\"joe@example.com\"\n        class=\"input input-bordered w-full max-w-sm\" value=\"&lt;?= $eHtmlAttr($viewModel-&gt;getEmail()) ?&gt;\"\n        @change=\"validate\" @keydown.enter.prevent=\"validate\"\n        hx-target=\"#guest-email-form-container\"\n        hx-swap=\"outerHTML\"\n        hx-trigger=\"mahxcheckout-guest-email-form-validated from:body\"\n        hx-post=\"&lt;?= $block-&gt;getUrl('mahxcheckout/form/guestEmailPost')?&gt;\"\n        hx-on:afterSwap=\"dispatchEmailSavedEvent\"\n    /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"puzzle-htmx/#htmx-attributes-breakdown","title":"\ud83d\udd0d HTMX Attributes Breakdown","text":"Attribute What it does <code>hx-post=\"...\"</code> Sends a POST request to a Magento controller (here, <code>mahxcheckout/form/guestEmailPost</code>). <code>hx-trigger=\"mahxcheckout-guest-email-form-validated from:body\"</code> Waits for a custom event to trigger the request. <code>hx-target=\"#guest-email-form-container\"</code> Tells HTMX where to insert the HTML response. <code>hx-swap=\"outerHTML\"</code> Tells HTMX how to insert the response \u2014 here it replaces the container completely. <p>\ud83e\udde0 The form only sends a request after frontend validation triggers the custom event <code>mahxcheckout-guest-email-form-validated</code>.</p>"},{"location":"puzzle-htmx/#the-magento-controller-htmx-compatible","title":"\ud83e\uddec The Magento Controller (HTMX Compatible)","text":"<p>Here\u2019s the controller: <code>Rkt\\MahxCheckout\\Controller\\Form\\GuestEmailPost</code></p> <pre><code>public function execute(): ResultInterface\n{\n    $guestEmailData = GuestEmailData::from(['email' =&gt; $this-&gt;getRequest()-&gt;getParam('email')]);\n\n    try {\n        $guestEmailData-&gt;validate();\n        $this-&gt;saveGuestEmailService-&gt;execute($guestEmailData);\n        return $this-&gt;getComponentResponse('guest.email.form');\n    } catch (Exception $e) {\n        $this-&gt;prepareErrorNotificationsWithFormData($guestEmailData-&gt;toArray(), $e);\n        return $this-&gt;getComponentResponse('guest.email.form', withNotification: true);\n    }\n}\n</code></pre>"},{"location":"puzzle-htmx/#whats-happening","title":"What's Happening:","text":"<ol> <li>\ud83d\udce5 Validates the guest email (<code>$guestEmailData-&gt;validate()</code>).</li> <li>\ud83d\udcbe Saves email address via service layer.</li> <li>\ud83d\udd01 Returns the same block HTML (<code>guest.email.form</code>), which HTMX swaps into the DOM.</li> </ol> <p>Because the block loads the saved email value (<code>$viewModel-&gt;getEmail()</code>), the input will now display the correct value after submission.</p>"},{"location":"puzzle-htmx/#htmx-usage-in-mahx-checkout-summary","title":"\ud83d\udccc HTMX Usage in MAHX Checkout \u2014 Summary","text":"<ol> <li>\ud83d\udcd0 Define a block using layout XML (like you're used to).</li> <li>\ud83e\udde0 Add HTMX attributes to the form/input/button in the template.</li> <li>\u2699\ufe0f Magento controller returns a block's HTML as a response.</li> <li>\ud83d\udd01 HTMX swaps the returned HTML into the DOM as instructed by <code>hx-target</code> and <code>hx-swap</code>.</li> </ol> <p>HTMX becomes the glue between Magento's server-side power and a smooth frontend UX \u2014 no bloated JS frameworks required.</p>"},{"location":"puzzle-htmx/#final-thoughts-tips","title":"\ud83d\udcac Final Thoughts &amp; Tips","text":"<ul> <li>\ud83d\udca1 HTMX attributes are easy to learn. You'll mostly use:</li> <li><code>hx-get</code>, <code>hx-post</code></li> <li><code>hx-trigger</code></li> <li><code>hx-target</code></li> <li><code>hx-swap</code></li> <li>\ud83d\udcda HTMX Core Attributes Documentation</li> <li>\ud83e\uddea Experiment with it \u2014 HTMX works out of the box in Magento because all it needs is server-rendered HTML.</li> </ul>"},{"location":"puzzle-htmx/#why-you-should-use-htmx-in-magento","title":"\ud83d\udca1 Why You Should Use HTMX in Magento","text":"<p>HTMX fits perfectly in the Magento ecosystem. It lets you:</p> <ul> <li>Avoid complex frontend frameworks</li> <li>Stay close to native Magento workflows</li> <li>Write clean, maintainable templates</li> <li>Save time and reduce JavaScript boilerplate</li> </ul> <p>\ud83e\udde1 Once you learn it, it\u2019s hard to go back. Most custom Magento UI tasks become 10x simpler with HTMX.</p>"},{"location":"puzzle-htmx/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>\ud83d\udd17 HTMX Official Site</li> <li>\ud83d\udd17 HTMX GitHub Repo</li> <li>\ud83d\udd17 HTMX Attribute Reference</li> </ul> <p>Happy hacking with HTMX and Magento \ud83e\udde9\ud83d\ude80</p>"},{"location":"steps/","title":"Checkout Step System in MAHX Checkout","text":"<p>The MAHX Checkout module provides an extendable and modular step system to structure your checkout process. It's designed with flexibility in mind, allowing developers to easily customize or extend individual steps without rewriting the entire flow.</p>"},{"location":"steps/#key-features","title":"\u2728 Key Features","text":"<ul> <li>\u2705 Simple to add custom steps</li> <li>\u2705 Easy to modify existing steps</li> <li>\u2705 Clean architecture using Magento DI (Dependency Injection)</li> <li> <p>\u2705 Default implementation mimics Magento Luma checkout with two steps:</p> <ul> <li>Shipping</li> <li>Payment</li> </ul> </li> </ul>"},{"location":"steps/#architecture-overview","title":"\ud83e\uddf1 Architecture Overview","text":""},{"location":"steps/#step-configuration-via-dixml","title":"Step Configuration via <code>di.xml</code>","text":"<p>The checkout steps are configured using Magento's <code>di.xml</code>. Here's a simplified excerpt that shows how steps are registered:</p> <pre><code>&lt;type name=\"MageHx\\MahxCheckout\\Model\\StepManager\\CheckoutStepPool\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"steps\" xsi:type=\"array\"&gt;\n            &lt;item name=\"shipping\" xsi:type=\"object\"&gt;MageHx\\MahxCheckout\\Model\\StepManager\\Step\\ShippingStepVirtual&lt;/item&gt;\n            &lt;item name=\"payment\" xsi:type=\"object\"&gt;MageHx\\MahxCheckout\\Model\\StepManager\\Step\\PaymentStepVirtual&lt;/item&gt;\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/type&gt;\n</code></pre> <p>Each step is defined as a virtual type. For example:</p> <pre><code>&lt;virtualType name=\"MageHx\\MahxCheckout\\Model\\StepManager\\Step\\ShippingStepVirtual\"\n             type=\"MageHx\\MahxCheckout\\Model\\StepManager\\CheckoutStep\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"name\" xsi:type=\"string\"&gt;shipping&lt;/argument&gt;\n        &lt;argument name=\"label\" xsi:type=\"string\"&gt;Shipping&lt;/argument&gt;\n        &lt;argument name=\"urlHash\" xsi:type=\"string\"&gt;shipping&lt;/argument&gt;\n        &lt;argument name=\"isDefault\" xsi:type=\"boolean\"&gt;true&lt;/argument&gt;\n        &lt;argument name=\"stepButtonLabel\" xsi:type=\"string\"&gt;Continue&lt;/argument&gt;\n        &lt;argument name=\"stepLayoutHandle\" xsi:type=\"string\"&gt;mahxcheckout_step_shipping&lt;/argument&gt;\n        &lt;argument name=\"saveDataUrl\" xsi:type=\"string\"&gt;mahxcheckout/shipping/saveShippingInformation&lt;/argument&gt;\n        &lt;argument name=\"components\" xsi:type=\"array\"&gt;\n            &lt;item name=\"guest_email_form\" xsi:type=\"object\"&gt;GuestEmailForm&lt;/item&gt;\n            &lt;item name=\"shipping_address_form\" xsi:type=\"object\"&gt;ShippingAddressForm&lt;/item&gt;\n            &lt;item name=\"shipping_methods_form\" xsi:type=\"object\"&gt;ShippingMethodsForm&lt;/item&gt;\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/virtualType&gt;\n</code></pre>"},{"location":"steps/#key-step-properties","title":"\ud83d\udd0d Key Step Properties","text":"<p>Each checkout step can be customized using the following properties:</p> Property Description <code>name</code> Unique identifier of the step. <code>label</code> Step label shown in the step navigation bar. <code>urlHash</code> The URL fragment (e.g., <code>#shipping</code>) used for direct access to the step. <code>isDefault</code> Whether this step is the default (first) step. <code>stepButtonLabel</code> Label of the navigation button (e.g., Continue, Place Order). <code>stepLayoutHandle</code> Layout handle used to render the step's contents. <code>saveDataUrl</code> URL endpoint used to persist data for the step. <code>components</code> List of form components involved in the step."},{"location":"steps/#form-components","title":"\ud83d\udce6 Form Components","text":"<p>Each step is composed of multiple FormComponents that handle different parts of the UI (e.g., shipping address, email form). These are also defined via <code>di.xml</code> as virtual types:</p> <pre><code>&lt;virtualType name=\"ShippingAddressForm\" type=\"MageHx\\MahxCheckout\\Model\\StepManager\\FormComponent\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"name\" xsi:type=\"string\"&gt;shipping-address-form&lt;/argument&gt;\n        &lt;argument name=\"label\" xsi:type=\"string\"&gt;Shipping Address&lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/virtualType&gt;\n</code></pre>"},{"location":"steps/#component-attributes","title":"Component Attributes","text":"Attribute Description <code>name</code> Used as the <code>id</code> in the frontend \u2014 must be unique. <code>label</code> Displayed as the title of the form section in the UI. <p>Each component extends:</p> <ul> <li><code>MageHx\\MahxCheckout\\Model\\StepManager\\FormComponent</code></li> <li>Implements: <code>FormComponentInterface</code></li> </ul>"},{"location":"steps/#how-it-works-step-registration-pooling","title":"\ud83e\udde9 How It Works: Step Registration &amp; Pooling","text":"<p>The <code>CheckoutStepPool</code> class manages all steps:</p> <ul> <li>Instantiated via DI with all registered steps.</li> <li>Builds a collection of <code>MageHx\\MahxCheckout\\Data\\CheckoutStepData</code> objects.</li> <li>Provides methods to fetch step data and navigation ordering.</li> </ul> <p>Additional step data (beyond XML configuration):</p> Property Description <code>order</code> Sort order of the step; used to determine navigation sequence. <code>isValid</code> Backend validation flag for the step \u2014 true if all its components are valid."},{"location":"steps/#extendability-customization","title":"\ud83e\udde0 Extendability &amp; Customization","text":""},{"location":"steps/#add-a-new-step","title":"\ud83c\udd95 Add a New Step","text":"<p>You can add new steps easily by adding another item in the <code>CheckoutStepPool</code> configuration and defining a virtual type with required properties.</p>"},{"location":"steps/#modify-an-existing-step","title":"\ud83d\udee0 Modify an Existing Step","text":"<p>Override the step\u2019s virtual type in your module\u2019s <code>di.xml</code> file to change its behavior or UI.</p>"},{"location":"steps/#modify-steps-at-runtime-observers","title":"\ud83e\udde9 Modify Steps at Runtime (Observers)","text":"<p>Two helpful events are dispatched by the <code>CheckoutStepPool</code>:</p> Event Name Description <code>mahxcheckout_steps_data_build_before</code> Modify or add steps before the step data collection is built. <code>mahxcheckout_steps_data_build_after</code> Modify step data after the collection is built. <p>These allow dynamic manipulation of the step list or its attributes.</p>"},{"location":"steps/#template-files","title":"\ud83d\uddbc\ufe0f Template Files","text":"<p>The following PHTML templates control how steps are rendered in the frontend:</p> File Purpose <code>step_navigation.phtml</code> Renders the top step navigation bar. <code>page_action.phtml</code> Defines the step action button (Continue/Place Order). <code>navigation_js.phtml</code> Defines Alpine.js component that manages step navigation."},{"location":"steps/#summary","title":"\ud83e\uddea Summary","text":"<p>MAHX Checkout\u2019s step system is fully declarative and highly extensible:</p> <ul> <li>Add new steps by updating <code>di.xml</code>.</li> <li>Modify or override existing ones via DI or observers.</li> <li>Hook into the step building process using dispatched events.</li> <li>Easily manage and render steps using the provided ViewModels and templates.</li> </ul> <p>This architecture ensures that your checkout flow remains modular, testable, and fully customizable without breaking the core logic.</p>"},{"location":"why-mahx-checkout/","title":"Why MAHX Checkout","text":"<p>Let\u2019s face it: Magento checkout is a beast. If you've spent time working with Magento 2, you already know \u2014 the checkout page is one of the most complex, rigid, and frustrating parts of the platform.</p> <p>But it doesn\u2019t have to be that way anymore.</p>"},{"location":"why-mahx-checkout/#the-problem-with-luma-checkout","title":"\ud83d\ude29 The Problem with Luma Checkout","text":"<p>Magento\u2019s default Luma checkout uses KnockoutJS and UI Components \u2014 a structure that feels... arcane.</p> <p>What does that mean?</p> <ul> <li>Hundreds of JS files</li> <li>Deeply nested observables</li> <li>Fragile bindings</li> <li>A page that's slow to load and painful to customize</li> </ul> <p>Changing a single label? That could take hours \u2014 especially if you\u2019re not familiar with Magento's frontend UI component system. Most Magento developers dread touching the checkout. And when it comes to customizing the flow or layout? Many simply walk away.</p>"},{"location":"why-mahx-checkout/#the-first-wave-hyva-react-checkout","title":"\u26a1 The First Wave: Hyv\u00e4 React Checkout","text":"<p>Then came a breakthrough: Hyv\u00e4 React Checkout. It ditched Knockout for modern React, made checkout blazingly fast, and suddenly customizing became a pleasure.</p> <p>This was a game-changer for teams fluent in React \u2014 and it\u2019s still a widely used solution in the Magento community today. However, for many Magento agencies and developers who live in PHP and XML, React was a tough sell. Learning a new stack \u2014 especially in Magento\u2019s fast-paced world \u2014 became a barrier for adoption.</p>"},{"location":"why-mahx-checkout/#the-revolution-hyva-checkout","title":"\ud83d\udd25 The Revolution: Hyv\u00e4 Checkout","text":"<p>Next came Hyv\u00e4 Checkout, built with Magewire \u2014 Magento\u2019s answer to Livewire.</p> <p>No frontend frameworks to learn. Just PHP, layout XML, and some smart reactivity. It made checkout:</p> <ul> <li>Fast</li> <li>Beautiful</li> <li>Developer-friendly</li> <li>Supports many number of payment and shipping methods through compatibility modules.</li> </ul> <p>But there's a catch: it's a paid solution. Also, it has a moderate learning curve due to the new technology magewire. While it\u2019s worth every penny, not every project or agency has the budget.</p>"},{"location":"why-mahx-checkout/#back-to-basics-mahx-checkout","title":"\ud83c\udf31 Back to Basics: MAHX Checkout","text":"<p>Enter MAHX Checkout \u2014 a fresh, free, developer-first solution.</p> <p>Imagine a checkout built with:</p> <ul> <li>Magento layouts, blocks, view models, and controllers</li> <li>Minimal JavaScript</li> <li>\u26a1 Fast performance</li> <li>\ud83e\udde9 Full flexibility</li> </ul> <p>Customizing your checkout becomes fun again. You're no longer fighting a framework \u2014 you're using the tools you already know and love.</p>"},{"location":"why-mahx-checkout/#what-makes-mahx-checkout-special","title":"\u2728 What Makes MAHX Checkout Special?","text":"<p>MAHX stands for Magento + HTMX.</p> <ul> <li>HTMX lets you trigger AJAX requests from any HTML element \u2014 without writing verbose JavaScript.</li> <li>Magento handles these requests just like any controller action and sends back... HTML.</li> <li>That HTML is dropped into the page and seamlessly replaces the old content.</li> </ul> <p>This means:</p> <ul> <li>You\u2019re not working with JSON APIs</li> <li>You\u2019re not wiring up complex JS state</li> <li>You\u2019re not managing hydration or rendering pipelines</li> </ul> <p>You're writing clean <code>.phtml</code> templates, layouts, and controllers \u2014 the tools you already know. You focus on behavior \u2014 not boilerplate.</p>"},{"location":"why-mahx-checkout/#how-does-it-work","title":"\ud83d\udd27 How Does It Work?","text":"<p>Here\u2019s the magic formula:</p> <ol> <li>HTMX handles dynamic interactions</li> <li>Magento controllers respond with rendered HTML</li> <li>The frontend swaps in the HTML, like magic</li> <li>You barely write any JavaScript</li> <li>You customize anything with PHP, XML, and <code>.phtml</code></li> </ol> <p>No complex state. No extra layers of tooling. Just pure Magento, turbocharged with HTMX.</p>"},{"location":"why-mahx-checkout/#who-is-this-for","title":"\ud83d\udca1 Who Is This For?","text":"<p>If you:</p> <ul> <li>Know Magento and want to build a better checkout</li> <li>Are frustrated with Knockout or overwhelmed by React</li> <li>Want freedom and speed without reinventing the wheel</li> </ul> <p>Then MAHX Checkout is built for you.</p> <p>It\u2019s not trying to reinvent the wheel \u2014 just making checkout faster, simpler, and more enjoyable for Magento developers.</p> <p>Ready to take back control of your Magento checkout? Let\u2019s build something fast, beautiful, and fun \u2014 together.</p>"}]}