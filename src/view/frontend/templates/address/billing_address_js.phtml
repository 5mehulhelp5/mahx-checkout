<?php declare(strict_types=1);

use MageHx\MahxCheckout\ViewModel\DesignThemeInfo;
use Magento\Framework\View\Element\Template;
use MageHx\MahxCheckout\ViewModel\BillingAddress;

/** @var Template $block */
/** @var string $eHtmlAttr */
/** @var string $nonce */
/** @var Closure $eJs */
/** @var Closure $viewModelProvider */
/** @var BillingAddress $viewModel */
/** @var DesignThemeInfo $themeInfo */

$viewModel = $viewModelProvider(BillingAddress::class);
$themeInfo = $viewModelProvider(DesignThemeInfo::class);
?>
<script nonce="<?= $eHtmlAttr($nonce) ?>">
    'use strict';

    function BillingAddressForm(form) {
        return {
            form: null,
            validator: null,

            init() {
                this.form = form || this.$el;
                this.modifyFormAfterRender();
                this.disablePageActionButton();
                this.registerEventListeners();
            },

            disablePageActionButton() {
                this.stepStore.actionButton.isDisabled = true;
                const pageNavButton = document.body.querySelector("button[data-role='opc-continue']");
                if (pageNavButton) {
                    pageNavButton.disabled = true;
                }
            },

            registerEventListeners() {
                const cancelButton = this.form.querySelector("button[data-role='action-cancel']");
                if (cancelButton) {
                    cancelButton.addEventListener('click', this.handleBillingCancel.bind(this));
                }

                const updateButton = this.form.querySelector("button[data-role='action-update']");
                if (updateButton) {
                    updateButton.addEventListener('click', this.handleBillingUpdate.bind(this));
                }
            },

            async handleBillingUpdate() {
                const isValid = await this.validator.revalidate();
                if (isValid) {
                    this.stepStore.actionButton.isDisabled = false;
                    htmx.trigger(document.body, 'mahxcheckout-billing-validated');
                }
            },

            handleBillingCancel(event) {
                htmx.trigger(event.target, 'mahxcheckout-billing-canceled');
                this.stepStore.actionButton.isDisabled = false;
            },

            handleCountryChange(event) {
                this.$dispatch(`mahxcheckout-${this.form.id}-country_id-changed`, { country: event.target.value })
            },

            modifyFormAfterRender() {
                Promise.resolve().then(() => {
                    this.focusOnFirstname();
                    this.applyValidation();
                });
            },

            focusOnFirstname() {
                this.form.elements.firstname.focus();
            },

            applyValidation() {
                this.validator = mahxCheckout.validator(Object.assign({
                    form: this.form,
                }, JSON.parse('<?= $eJs($viewModel->getValidationJson()) ?>')))
                this.addValidatorToPageNavigation(this.form.id, this.validator);
            },
            <?php if($themeInfo->isHyvaTheme()): ?>
            get stepStore() {
                return this.$store.checkoutStepStorage;
            },
            <?php endif; ?>
        };
    }

    document.addEventListener('alpine:init', () => {
        Alpine.data('BillingAddressForm', BillingAddressForm);
    });
</script>
