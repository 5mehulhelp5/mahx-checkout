<?php declare(strict_types=1);

use MageHx\MageTemplateUtils\Model\Esc;
use MageHx\MageTemplateUtils\Model\ViewModelProvider;
use MageHx\MahxCheckout\ViewModel\DesignThemeInfo;
use Magento\Framework\View\Element\Template;
use MageHx\MahxCheckout\ViewModel\BillingAddress;

/** @var Template $block */
/** @var string $nonce */
/** @var Esc $esc */
/** @var ViewModelProvider $viewModelProvider */

$viewModel = $viewModelProvider->get(BillingAddress::class);
$themeInfo = $viewModelProvider->get(DesignThemeInfo::class);
?>
<script nonce="<?= $esc->htmlAttr($nonce) ?>">
    'use strict';

    function BillingAddressForm(form) {
        return {
            form: null,
            validator: null,
            validationRules: <?= /** @noEscape */ $viewModel->getValidationJson() ?>,

            init() {
                this.form = form || this.$el;
                this.modifyFormAfterRender();
                this.disablePageActionButton();
                this.registerEventListeners();
            },

            disablePageActionButton() {
                this.stepStore.actionButton.isDisabled = true;
                const pageNavButton = document.body.querySelector("button[data-role='opc-continue']");
                if (pageNavButton) {
                    pageNavButton.disabled = true;
                }
            },

            registerEventListeners() {
                htmx.on(this.form, 'htmx:beforeSwap', (event) => {
                    if (event.detail.requestConfig.elt.name === 'region') {
                        this.validator.removeField(this.form.elements.region);
                    }
                });

                htmx.on(this.form, 'htmx:afterSwap', (event) => {
                    if (event.detail.requestConfig.elt.name === 'region') {
                        this.validator.applyRules({ region: this.validationRules.rules.region });
                    }
                });

                htmx.on(this.form.country_id, 'change', (event) => {
                    const eventName = 'mahxcheckout-' + this.form.id + '-country_id-changed';
                    htmx.trigger(event.target, eventName, { country: event.target.value });
                });

                const cancelButton = this.form.querySelector("button[data-role='action-cancel']");
                if (cancelButton) {
                    cancelButton.addEventListener('click', this.handleBillingCancel.bind(this));
                }

                const updateButton = this.form.querySelector("button[data-role='action-update']");
                if (updateButton) {
                    updateButton.addEventListener('click', this.handleBillingUpdate.bind(this));
                }
            },

            async handleBillingUpdate() {
                // this.validator.onFail((fields) =>  console.log(fields));
                const isValid = await this.validator.revalidate();

                if (! isValid) {
                    htmx.trigger(this.form, 'submit');
                    return;
                }

                this.stepStore.actionButton.isDisabled = false;
                htmx.trigger(this.form, 'mahxcheckout-billing-validated');
            },

            handleBillingCancel(event) {
                htmx.trigger(event.target, 'mahxcheckout-billing-canceled');
                this.stepStore.actionButton.isDisabled = false;
            },

            modifyFormAfterRender() {
                Promise.resolve().then(() => {
                    this.focusOnFirstname();
                    console.log('applyvalidation')
                    this.applyValidation();
                });
            },

            focusOnFirstname() {
                this.form.elements.firstname.focus();
            },

            applyValidation() {
                this.validator = mahxCheckout.validator(Object.assign({
                    form: this.form,
                }, this.validationRules))
                this.addValidatorToPageNavigation(this.form.id, this.validator);
            },
            <?php if($themeInfo->isHyvaTheme()): ?>
            get stepStore() {
                return this.$store.checkoutStepStorage;
            },
            <?php endif; ?>
        };
    }

    document.addEventListener('alpine:init', () => {
        Alpine.data('BillingAddressForm', BillingAddressForm);
    });
</script>
