<?php declare(strict_types=1);

use Magento\Framework\View\Element\Template;
use MageHx\MahxCheckout\ViewModel\ShippingAddressCards;

/** @var Template $block */
/** @var string $eHtmlAttr */
/** @var string $nonce */
/** @var Closure $eJs */
/** @var Closure $eUrl */
/** @var Closure $viewModelProvider */
/** @var ShippingAddressCards $viewModel */
$viewModel = $viewModelProvider(ShippingAddressCards::class);

if (!$viewModel->isCurrentCustomerHaveAddresses()) {
    return;
}
?>
<script nonce="<?= $eHtmlAttr($nonce) ?>">
    const ShippingAddressCardStorage = {
        selectedAddressId: null,
    };
    function ShippingAddressCards(elem) {
        return {
            get selectedAddressId() {
                return this.store.selectedAddressId;
            },

            init() {
                this.$el = elem || this.$el;
                this.store.selectedAddressId = this.$el.dataset.selectedAddress;
                this.registerEventListeners();
            },

            registerEventListeners() {
                this.$el.addEventListener('mahxcheckout-customer-address-selected', (event) => {
                    const addressIdInput = this.$el.querySelector("input[name=customer_address_id]");
                    if (addressIdInput) {
                        addressIdInput.value = event.detail.addressId;
                    }
                });
            },

            get store() {
                return this.$store.shippingAddressCardStorage;
            },
        };
    }

    function AddressCard(elem) {
        return {
            addressId: null,

            init() {
                this.$el = elem || this.$el;
                this.addressId = this.$el.dataset.addressId;
                this.applyCardChanges();
                this.registerEventListeners();
            },

            applyCardChanges() {
                this.applySelectedCardStyle();
                this.updateShipHereButtonDisplay();
            },

            registerEventListeners() {
                const shipHereButton = this.getShipHereButton();
                if (shipHereButton) {
                    shipHereButton.addEventListener('click', this.setShipToAddress.bind(this));
                }
                this.$el.parentElement.addEventListener(
                    'mahxcheckout-customer-address-selected',
                    () => this.applyCardChanges()
                );
            },

            setShipToAddress(event) {
                this.store.selectedAddressId = this.addressId;
                event.target.dispatchEvent(
                    new CustomEvent('mahxcheckout-customer-address-selected', {
                        bubbles: true,
                        detail: { addressId: this.addressId }
                    })
                );
            },

            applySelectedCardStyle() {
                const selectedClasses = ['selected-item', 'border-2', 'border-orange-500', 'relative'];
                const unselectedClasses = ['border', 'border-gray-300'];

                selectedClasses.forEach(cls => this.$el.classList.toggle(cls, this.isSelected));
                unselectedClasses.forEach(cls => this.$el.classList.toggle(cls, !this.isSelected));
            },

            updateShipHereButtonDisplay() {
                const shipHereButton = this.getShipHereButton();
                if (shipHereButton) {
                    shipHereButton.display = this.isSelected ? 'none' : 'block';
                }
            },

            getShipHereButton() {
                return this.$el.querySelector("button[data-role='action-ship-here']");
            },

            get isSelected() {
                return this.store.selectedAddressId === this.addressId;
            },

            get isNotSelected() {
                return !this.isSelected;
            },

            // get addressCardExtraClasses() {
            //     return this.isSelected ? 'border-2 border-orange-500 relative' : 'border border-gray-300';
            // },

            get store() {
                return this.$store.shippingAddressCardStorage;
            },
        };
    }
    document.addEventListener('alpine:init', () => {
        Alpine.store('shippingAddressCardStorage', ShippingAddressCardStorage);
        Alpine.data('ShippingAddressCards', ShippingAddressCards);
        Alpine.data('AddressCard', AddressCard);
    });
</script>
