<?php declare(strict_types=1);

use MageHx\MageTemplateUtils\Model\Esc;
use MageHx\MageTemplateUtils\Model\ViewModelProvider;
use Magento\Framework\View\Element\Template;
use MageHx\MahxCheckout\Enum\CheckoutForm;
use MageHx\MahxCheckout\ViewModel\ShippingAddress;

/** @var Template $block */
/** @var string $nonce */
/** @var Esc $esc */
/** @var ViewModelProvider $viewModelProvider */

$viewModel = $viewModelProvider->get(ShippingAddress::class);
?>
<script nonce="<?= $esc->htmlAttr($nonce) ?>">
    function NewShippingAddressFormManager(elem) {
        const newFormId = '<?= /** @noEscape */ CheckoutForm::NEW_ADDRESS->value ?>';

        return {
            form: null,
            validator: null,
            validationRules: <?= /** @noEscape */ $viewModel->getValidationJson() ?>,

            init() {
                this.$el = elem || this.$el;
                this.form = this.$el.querySelector('form');
                this.modifyFormAfterRender();
                this.registerEventListeners();
            },

            handleCountryChange(event) {
                const eventName = 'mahxcheckout-' + newFormId + '-country_id-changed';
                htmx.trigger(event.target, eventName, {
                    bubbles: true,
                    detail: { country: event.target.value }
                });
            },

            modifyFormAfterRender() {
                Promise.resolve().then(() => {
                    this.focusOnFirstname();
                    this.applyValidation();
                });
            },

            registerEventListeners() {
                htmx.on(this.form.elements.country_id, 'change', this.handleCountryChange.bind(this));
                <?php // Prevent form submission when the form validation fails ?>
                htmx.on(this.form, 'htmx:confirm', (event) => {
                    if (event.detail.elt !== this.form) {
                        return;
                    }
                    <?php // Stop sending htmx request immediately. ?>
                    event.preventDefault();

                    this.validator.revalidate().then((isValid) => {
                        if (isValid) {
                            <?php // Proceed with htmx request. ?>
                            event.detail.issueRequest();
                        }
                    });
                });
                <?php // When country changes, region field is swapped. Here we remove the validation for region field ?>
                htmx.on(this.form, 'htmx:beforeSwap', (event) => {
                    if (event.detail.requestConfig.elt.name === 'region') {
                        this.validator.removeField(this.form.elements.region);
                    }
                });
                <?php // When country changes, region field is swapped. Here we reapply the validation for region field ?>
                htmx.on(this.form, 'htmx:afterSwap', (event) => {
                    if (event.detail.requestConfig.elt.name === 'region') {
                        this.validator.applyRules({ region: this.validationRules.rules.region });
                    }
                });
            },

            async handleAddressUpdate() {
                this.validator.onFail((fields) =>  console.log(fields));
                const isValid = await this.validator.revalidate();

                if (! isValid) {
                    htmx.trigger(this.form, 'submit');
                    return;
                }

                this.stepStore.actionButton.isDisabled = false;
                htmx.trigger(this.form, 'mahxcheckout-billing-validated');
            },

            focusOnFirstname() {
                this.form.elements.firstname.focus();
            },

            applyValidation() {
                this.validator = mahxCheckout.validator(Object.assign({
                    form: this.form,
                }, this.validationRules));
                this.addValidatorToPageNavigation(this.form.id, this.validator);
            },
        };
    }
    document.addEventListener('alpine:init', () => {
        Alpine.data('NewShippingAddressFormManager', NewShippingAddressFormManager)
    });
</script>
